package arraySorter;

public class QuickSort<T extends Comparable<? super T>> implements ArraySort<T> {
    /**
     * Sorts an array using the Quick sort algorithm.
     *
     * @param array the array to be sorted.
     * Sends the array through the quickSort function.
     * @return the sorted array.
     */
    public T[] sort(T[] array) {
        return quickSort( array,0, array.length -1);
    }

    /**
     * Starts the Quick Sort process. Starting the partition which then recursively sorts both sides of the partition.
     *
     * @param array the array to be sorted.
     * @param startPoint the starting index for the partition.
     * @param endPoint the ending index for the partition.
     * @return the sorted array.
     */
    T[] quickSort(T[] array, int startPoint, int endPoint) {
        if(startPoint < endPoint) {
            int partition = partition(array, startPoint, endPoint);

            array = quickSort(array, startPoint, partition - 1);
            array = quickSort(array, partition + 1, endPoint);
        }
        return  array;
    }

    /**
     * Sets the Pivot to end point and iterates by creating an index using the starting point.
     * Compares and swaps values when needed.
     *
     * @param array the array to be sorted.
     * @param startPoint the starting index for the partition.
     * @param endPoint the ending index for the partition.
     *
     * @return the index of the sorting array.
     */
    int partition(T[] array, int startPoint, int endPoint) {
        T pivot = array[endPoint];

        int index = startPoint - 1;

        for (int i = startPoint; i < endPoint; i++) {
            if (array[i].compareTo(pivot) < 0) {
                index++;

                T tmp = array[index];
                array[index] = array[i];
                array[i] = tmp;
            }
        }

        int newIndex = index + 1;
        T tmp = array[newIndex];
        array[newIndex] = array[endPoint];
        array[endPoint] = tmp;

        return  newIndex;
    }
}
