package searcher;

import java.util.Arrays;

public class CleverSearcher extends Searcher {

    CleverSearcher(int[] array, int k) {
        super(array, k);
    }

    /**
     * This creates the kArray and the array.
     * @return the first index of the sorted array.
     */
    @java.lang.Override
    public int findElement() throws IndexingError {
        int[] array = getArray();
        int k = getIndex();
        if (k <= 0 || k > array.length) {
            throw new IndexingError();
        }

        int[] kArray;
        if(k > array.length / 2) {
            kArray = Arrays.copyOfRange(array,array.length - k, array.length);
            array = Arrays.copyOfRange(array,0, array.length - k);
        }
        else{
            kArray = setUpArray(k, array);
            array = Arrays.copyOfRange(array,k, array.length);
        }

        kArray = sortLargest(kArray, -1);

        for(int i : array){
            kArray = sortLargest(kArray, i);
        }

        return kArray[0];
    }
    
    /**
     * @param k
     * @param array
     * This set up the new array copied from the array param.
     * @return the created array.
     */
    int[] setUpArray(int k, int[] array){
        int[] tempArray = new int[k];
        for(int i = 0; i < k; i++){
            tempArray[i] = array[i];
        }
        return tempArray;
    }


    /**
     * @param kArray
     * @param number
     * Checks if the first value is less than the number, if so then set number as 0.
     * It then sorts the kArray.
     * @return the  kArray.
     */
    int[] sortLargest(int[] kArray, int number){
        if(kArray[0] < number){
            kArray[0] = number;
        }

        for(int index = 1; index < kArray.length; index++){
           if(kArray[index] < kArray[index - 1]){
               int temp = kArray[index];
               kArray[index] = kArray[index-1];
               kArray[index-1] = temp;
           }
        }

        return kArray;
    }
}
